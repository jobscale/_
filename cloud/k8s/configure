production() {
  export KINDNAME=production
  export KINDCONFIG=kindest/production.yaml
}
staging() {
  export KINDNAME=staging
  export KINDCONFIG=kindest/staging.yaml
}
development() {
  export KINDNAME=development
  export KINDCONFIG=kindest/development.yaml
}

development

initializeDatabase() {
  sql="CREATE DATABASE IF NOT EXISTS wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO 'wp-user'@'%' IDENTIFIED BY 'wp-admin';
FLUSH PRIVILEGES;"
  kubectl exec -i $(
    kubectl get all | grep pod | grep mariadb | awk '{print $1}'
  ) -- bash -c "echo \"$sql\" | mysql -p$1"
}

allInOne() {
  echo -n "setup '$KINDNAME' deployment "
  read -p "ok? (y/N): " yn; case "$yn" in [yY]*) echo "continue";; *) echo "abort" && return;; esac

  mkdir -p /home/k8s/logs
  [[ ! -d /home/k8s/logs ]] && echo mkdir /home/k8s/logs && return 1
  LOGFILE=/home/k8s/logs/kind-$KINDNAME-$(date +'%Y-%m-%d-%H:%M:%S').log
  time inAllInOne 2>&1 | tee $LOGFILE
}

createStandard() {
  kubectl apply -f limitrange-limits.yaml -n default

  kubectl create namespace standard
  kubectl config set-context $(kubectl config current-context) --namespace standard
  kubectl apply -f limitrange-limits.yaml
  kubectl describe nodes
}

inAllInOne() {
  createKind
  createStandard
  [[ $KINDNAME == production ]] && createSecret
  # [[ $KINDNAME == production ]] && pullImages
  appFirst
  [[ $KINDNAME == production ]] && cronJob
  [[ $KINDNAME == production ]] && deployApps
  kubectl apply -f gitlab && waitFor gitlab
  ingressForward

  echo -n "       ending" && loop 20
  kubectl get pods -A -o wide
  docker exec -i $KINDNAME-control-plane crictl images > images-$KINDNAME-list
  echo -e '\n\nk8s creation finished.\n\n'

  [[ $KINDNAME == production ]] && initWetty
  initializeDatabase false
  token
}

initWetty() {
  TTY_PASSWD="$(makePasswd)"
  genPasswd "$TTY_PASSWD"
  echo "Initialized password: '$TTY_PASSWD'"
}

createSecret() {
  FILE=$HOME/.docker/config.json
  kubectl create secret generic regcred --from-file=.dockerconfigjson=$FILE --type=kubernetes.io/dockerconfigjson
}

internalService() {
  kubectl apply -f squid && waitFor squid
  kubectl apply -f bind9 && waitFor bind9
}

jsxSite() {
  [[ $KINDNAME == production ]] && kubectl apply -f partner && waitFor partner
  kubectl apply -f jsxjp && waitFor jsxjp
}

nodeAws() {
  kubectl apply -f node-aws && waitFor node-aws
}

createKind() {
  [[ -s $HOME/.kube/config ]] && mv $HOME/.kube/config $HOME/.kube/save-config_$(date +'%Y-%m-%d_%H:%M:%S')
  # kind create cluster --name $KINDNAME --config $KINDCONFIG
  kind create cluster --name $KINDNAME --config $KINDCONFIG --image kindest/node:v1.20.2
  cp $HOME/.kube/config $HOME/.kube/kind-config-$KINDNAME

  echo -n "       wait for nodes initializing" && loop 20
  kubectl get nodes -o wide
  echo -n "       wait for pods initializing" && loop 60
  kubectl get pods -A -o wide
}

cronJob() {
  [[ "$KINDNAME" != production ]] && return
  [[ "$(hostname)" != focal ]] && return
  kubectl create cronjob value-domain --image=jobscale/value-domain --schedule='0/7 * * * *'
}

metalLB() {
  METAL_VERSION=$(git ls-remote --tags --refs https://github.com/danderson/metallb.git | tail -1 | awk -F/ '{print $3}')
  METAL_SECRET=$(openssl rand -base64 128 | xargs | sed -e 's/ //g')
  echo -e "\n MetalLB ${METAL_VERSION} \n"
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/namespace.yaml
  kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=$METAL_SECRET
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/metallb.yaml
  kubectl apply -f https://git.io/km-config.yaml
  # kubectl apply -f layer2-config.yaml
  waitFor metallb-system
}

ingressForward() {
  kubectl apply -f web && waitFor web
}

adminDashboard() {
  DASHBOARD_VERSION=$(git ls-remote --refs --tags https://github.com/kubernetes/dashboard.git | sort -t '/' -k 3 -V | tail -1 | awk -F/ '{print $3}')
  curl -so kubernetes-dashboard.yaml https://raw.githubusercontent.com/kubernetes/dashboard/${DASHBOARD_VERSION}/aio/deploy/recommended.yaml
  kubectl apply -f kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
  waitFor kubernetes-dashboard
}

makePasswd() {
  head -c 8 /dev/random | mkpasswd -s -5 | sed -e 's/\$//g' | sed -e 's/^1//'
}

genPasswd() {
  [[ "$GEN_PASSWD" == "" ]] && GEN_PASSWD="$1"
  [[ "$GEN_PASSWD" == "" ]] && echo -e "failed password.\nusage:\n\n  GEN_PASSWD='$(makePasswd)' genPasswd\n" && return
  kubectl exec -i $(kubectl get pods | grep ^gke- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^eks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^aks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^wetty- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
}

exposedDeployment() {
  MIN_REPLICA=$5
  MIN_REPLICA=1 # minimum up
  kubectl create deployment $1 --image $2
  kubectl expose deployment $1 --name $1 --type LoadBalancer --port $3 --target-port $4
  [[ "$5" != "0" ]] && kubectl autoscale deployment $1 --cpu-percent 50 --min $MIN_REPLICA --max 20
  waitFor $1
}

deployCluster() {
  kubectl create deployment $1 --image $2
  kubectl expose deployment $1 --name $1 --type ClusterIP --port $3 --target-port $4
  waitFor $1
}

deployBacklog() {
  [[ $(grep ""vm.max_map_count /etc/sysctl.d/99-sysctl.conf | wc -l) < 1 ]] \
  && echo "vm.max_map_count = 262144" | sudo tee -a /etc/sysctl.d/99-sysctl.conf \
  && sudo sysctl --system
  kubectl run elasticsearch --env "http.host=0.0.0.0" --env "ES_JAVA_OPTS=-Xms512m -Xmx512m" --image docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
  waitFor elasticsearch
  kubectl run graylog --env GRAYLOG_HTTP_EXTERNAL_URI="/" --port 9000 --port 12201 --port 1514 --port 5555 --image graylog/graylog:3.1
  kubectl expose deployment graylog --name graylog --type LoadBalancer--port 80 --target-port 9000
  waitFor graylog
}

deployBackend() {
  deployCluster redis redis 6379 6379
  deployCluster mongo mongo 27017 27017
  kubectl apply -f mariadb && waitFor mariadb
  kubectl apply -f postgres && waitFor postgres
  kubectl apply -f mysql && waitFor mysql
}

metricsServer() {
  METRICS_SERVER_VERSION=$(git ls-remote --refs --tags https://github.com/kubernetes-sigs/metrics-server.git | sort -t '/' -k 3 -V | tail -1 | awk -F/ '{print $3}')
  echo "kubernetes-sigs metrics-server $METRICS_SERVER_VERSION"
  METRICS_SERVER_VERSION=v0.4.1
  curl -sLo metrics-server/components.yaml https://github.com/kubernetes-sigs/metrics-server/releases/download/${METRICS_SERVER_VERSION}/components.yaml
  kubectl apply -f metrics-server
}

appFirst() {
  metricsServer
  metalLB
  adminDashboard
  deployBackend
  internalService
  jsxSite
  nodeAws
}

loadImage() {
  docker pull $1
  kind load docker-image $1 --name $KINDNAME
  delay
}

deployNode() {
  exposedDeployment wetty jobscale/wetty 443 3000 0
  exposedDeployment gke jobscale/cloud-terminal 443 3000 0
  exposedDeployment eks jobscale/cloud-terminal 443 3000 0
  exposedDeployment aks jobscale/cloud-terminal 443 3000 0
  exposedDeployment mongo-blog jobscale/mongo-blog 80 3000 3
  exposedDeployment room-chat jobscale/room-chat 80 3000 0
  exposedDeployment simple-chat jobscale/simple-chat 80 3000 0
}

deployNginx() {
  exposedDeployment nginx nginx 80 80 3
  exposedDeployment anywaychat jobscale/anywaychat 80 80 3
  exposedDeployment ramen-timer jobscale/ramen-timer 80 80 3
}

deployPhp() {
  exposedDeployment profile jobscale/profile 80 80 3
  exposedDeployment laravel jobscale/laravel 80 80 3
  exposedDeployment lumen jobscale/lumen 80 80 3
  exposedDeployment dokuwiki jobscale/dokuwiki 80 80 3
  exposedDeployment wordpress jobscale/wordpress 80 8000 0
  exposedDeployment ec-cube jobscale/ec-cube:4.0 80 80 3
}

deployApache() {
  exposedDeployment apache httpd 80 80 3
}

deployPython() {
  exposedDeployment tutorial docker/getting-started 80 80 3
  kubectl apply -f django
  waitFor django
}

deployEcho() {
  exposedDeployment echo-server inanimate/echo-server 80 8080 3
}

deployApps() {
  deployNode
  deployNginx
  deployPhp
  deployPython
  deployApache
  deployEcho
}

delAll() {
  for app in laravel lumen blog simple-chat chat
  do
    kubectl delete svc $app
    kubectl delete deployment $app
  done
}

token() {
  [[ "$(kubectl get namespaces | grep kubernetes-dashboard)" == "" ]] && echo 'no token' && return
  kubectl describe secrets -n kubernetes-dashboard admin-user | grep ^token | awk '{print $2}'
}

waitFor() {
  echo -n "       waiting" && loop 10
  for limit in {5..1}
  do
    [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
    echo " $1 - ng"
    echo -ne "just a moment please 11.."
    for i in {10..0}
    do
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
      echo -n " $i.."
    done
  done
}

delay() {
  sleep 8
}

loop() {
    for i in $(seq $1 -1 1)
    do
        printf '\r%5d' $i
        sleep 1
    done
    printf '\r%5d\n' 0
}

pullImages() {
  IMAGELIST=(
    debian:buster-slim
    debian:buster
    alpine
    node
    nginx
    mysql:8.0
    httpd
    mariadb
    mongo
    postgres
    redis
    kubernetesui/dashboard:v2.1.0
    kubernetesui/metrics-scraper:v1.0.6
    metallb/controller:v0.9.5
    metallb/speaker:v0.9.5
    inanimate/echo-server
    docker/getting-started
    jobscale/cloud-terminal
    jobscale/wetty
    jobscale/anywaychat
    jobscale/django
    jobscale/dokuwiki
    jobscale/ec-cube:4.0
    jobscale/gitlab
    jobscale/jsxjp
    jobscale/laravel
    jobscale/lumen
    jobscale/mongo-blog
    jobscale/profile
    jobscale/ramen-timer
    jobscale/room-chat
    jobscale/simple-chat
    jobscale/value-domain
    jobscale/squid
    jobscale/bind9
    jobscale/web
    jobscale/wordpress
  )
  for image in ${IMAGELIST[@]}
  do
    echo pull image $image
    time docker exec -i $KINDNAME-control-plane crictl pull $image
  done
}
