svc() {
  [[ $(nc -v localhost 8001 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl proxy &
  KUBE_NAMESPACE=default
  KUBE_SERVICE=$1
  KUBE_HOST=http://127.0.0.1:8001
  KUBE_TOKEN=$(kubectl describe secrets | grep ^token | awk '{print $2}')
  kubectl config view --raw
  echo "token $KUBE_TOKEN"
  # open ${KUBE_HOST}/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
  kubectl -n $KUBE_NAMESPACE -ojson get service $KUBE_SERVICE > ../loadbalancer.json
  vi ../loadbalancer.json
  https_proxy= http_proxy= curl -k --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_HOST}/api/v1/namespaces/${KUBE_NAMESPACE}/services/${KUBE_SERVICE}/status -X PUT -d @../loadbalancer.json -H 'content-type:application/json'
}

allInOne() {
  kind create clustar --config multinode.yaml
  adminDashboard
  deployApps
  portForward
}

adminDashboard() {
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secrets | grep admin-user | awk '{print $1}') | grep ^token
}

deployApps() {
  kubectl apply -f web

  kubectl run redis --image redis --expose=true --port 6379
  kubectl run mongo --image mongo --expose=true --port 27017

  kubectl run simple-chat --image jobscale/simple-chat
  kubectl expose deployment simple-chat --name=simple-chat --type=LoadBalancer --port=3000 --target-port=3000

  kubectl run chat --image jobscale/chat
  kubectl expose deployment chat --name=chat --type=LoadBalancer --port=3033 --target-port=3033

  kubectl run blog --image jobscale/blog
  kubectl expose deployment blog --name=blog --type=LoadBalancer --port=3344 --target-port=3344

  kubectl run laravel --image jobscale/laravel
  kubectl expose deployment laravel --name=laravel --type=LoadBalancer --port=8801 --target-port=80

  kubectl run lumen --image jobscale/lumen
  kubectl expose deployment lumen --name=lumen --type=LoadBalancer --port=8802 --target-port=80
}

token() {
  # kubectl describe secrets | grep ^token | awk '{print $2}'
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
}

portForward() {
  [[ $(nc -v localhost 443 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && sudo -E kubectl port-forward --address 0.0.0.0 svc/web 443:443 80:80 &
  [[ $(nc -v localhost 8443 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl port-forward --address 0.0.0.0 svc/kubernetes-dashboard -n kube-system 8443:443 &
  # [[ $(nc -v localhost 3000 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl port-forward --address 0.0.0.0 svc/simple-chat 3000:3000 &
  # [[ $(nc -v localhost 3033 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl port-forward --address 0.0.0.0 svc/chat 3033:3033 &
  # [[ $(nc -v localhost 3344 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl port-forward --address 0.0.0.0 svc/blog 3344:3344 &
  wait
}
