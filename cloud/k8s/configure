svc() {
  [[ $(nc -v localhost 8001 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl proxy &
  KUBE_NAMESPACE=default
  KUBE_SERVICE=$1
  KUBE_HOST=http://127.0.0.1:8001
  KUBE_TOKEN=$(kubectl describe secrets | grep ^token | awk '{print $2}')
  kubectl config view --raw
  echo "token $KUBE_TOKEN"
  # open ${KUBE_HOST}/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
  kubectl -n $KUBE_NAMESPACE -ojson get service $KUBE_SERVICE > ../loadbalancer.json
  vi ../loadbalancer.json
  https_proxy= http_proxy= curl -k --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_HOST}/api/v1/namespaces/${KUBE_NAMESPACE}/services/${KUBE_SERVICE}/status -X PUT -d @../loadbalancer.json -H 'content-type:application/json'
}

delay() {
  sleep 8
}

allInOne() {
  time internalAllInOne | tee /tmp/k8s-all.log
}

internalAllInOne() {
  createKind
  kubeConfig

  timeout 120 kubectl get nodes -w
  timeout 60 kubectl get pods -A -w

  metalLB
  delay && ingressNginx
  delay && adminDashboard

  timeout 60 kubectl get pods -A -w

  deployApps

  delay && ingressForward

  timeout 60 kubectl get pods -A -w

  echo -e '\n\nk8s creation finished.\n\n'
  timeout 60 kubectl get pods -A -w

  delay && kubectl -n kube-system describe secret $(kubectl -n kube-system get secrets | grep admin-user | awk '{print $1}') | grep ^token
  delay && portForward
}

kubeConfig() {
  export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"
}

createKind() {
  kind create cluster --config multinode.yaml
}

metalLB() {
  # METAL_VERSION=$(curl -s https://metallb.universe.tf/release-notes/ | grep "MetalLB v" | head -1 | awk '{print $2}')
  METAL_VERSION=$(git ls-remote --tags https://github.com/danderson/metallb.git | grep -v '{}' | tail -1 | awk -F/ '{print $3}')
  echo -e "\n MetalLB ${METAL_VERSION} \n"
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/metallb.yaml
  kubectl apply -f https://git.io/km-config.yaml
  # kubectl apply -f layer2-config.yaml
}

ingressNginx() {
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
}

ingressForward() {
  delay && kubectl apply -f web
}

adminDashboard() {
  kubectl apply -f kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
}

exposedDeployment() {
  kubectl create deployment $1 --image $2
  kubectl autoscale deployment $1 --cpu-percent=50 --min=3 --max=20
  delay
  kubectl expose deployment $1 --name $1 --type LoadBalancer --port $3 --target-port $4
  [[ $5 != 0 ]] && kubectl autoscale deployment $1 --cpu-percent 50 --min $5 --max 20
}

deployApps() {
  kubectl run redis --image redis --expose=true --port 6379
  kubectl run mongo --image mongo --expose=true --port 27017

  if [[ $(docker images | grep local/tetris | wc -l) > 0 ]]
  then
    kind load docker-image local/tetris:0.0.1
    kubectl run tetris --image=local/tetris:0.0.1 --expose=true --port=8888
  fi

  svcApps
}

svcApps() {
  exposedDeployment laravel jobscale/laravel 80 80 3
  exposedDeployment lumen jobscale/lumen 80 80 3
  exposedDeployment blog jobscale/blog 80 3344 3
  exposedDeployment simple-chat jobscale/simple-chat 80 3000 3
  exposedDeployment chat jobscale/chat 80 3033 3
  exposedDeployment wetty jobscale/wetty 80 3000 0
}

token() {
  # kubectl describe secrets | grep ^token | awk '{print $2}'
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
}

portForward() {
  [[ $(nc -v localhost 443 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && sudo -E kubectl port-forward --address 0.0.0.0 svc/web 443:443 80:80 &
  wait
}
