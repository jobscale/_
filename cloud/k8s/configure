production() {
  export KINDNAME=production
  export KINDHTTP=80
  export KINDHTTPS=443
  export KINDCONFIG=multinode.yaml
}
staging() {
  export KINDNAME=staging
  export KINDHTTP=3080
  export KINDHTTPS=3443
  export KINDCONFIG=singlenode.yaml
}
development() {
  export KINDNAME=development
  export KINDHTTP=4080
  export KINDHTTPS=4443
  export KINDCONFIG=singlenode.yaml
}

staging

svc() {
  [[ $(nc -v localhost 8001 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl proxy &
  KUBE_NAMESPACE=$1
  KUBE_SERVICE=$1
  KUBE_HOST=http://127.0.0.1:8001
  KUBE_TOKEN=$(kubectl describe secrets | grep ^token | awk '{print $2}')
  kubectl config view --raw
  echo "token $KUBE_TOKEN"
  # open ${KUBE_HOST}/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
  kubectl -n $KUBE_NAMESPACE -ojson get service $KUBE_SERVICE > ../loadbalancer.json
  vi ../loadbalancer.json
  https_proxy= http_proxy= curl -k --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_HOST}/api/v1/namespaces/${KUBE_NAMESPACE}/services/${KUBE_SERVICE}/status -X PUT -d @../loadbalancer.json -H 'content-type:application/json'
}

delay() {
  sleep 8
}

waitFor() {
  while [[ "$1" != "" ]]
  do
    [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok" && return
    echo " $1 - ng"
    echo -ne "just a moment please 11.."
    for i in {10..0}
    do
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok" && return
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok" && return
      echo -n " $i.."
    done
  done
}

initializeDatabase() {
  kubectl exec -it $(
    kubectl get all | grep pod | grep mariadb | awk '{print $1}'
  ) -- bash -c "echo 'create database wordpress;' | mysql -p$1"
}

allInOne() {
  LOGFILE=/tmp/k8s-$KINDNAME-$(date +'%Y-%m-%d-%H:%M:%S').log
  time internalAllInOne |& tee $LOGFILE

  kubectl -n kube-system describe secret $(
    kubectl -n kube-system get secrets | grep admin-user | awk '{print $1}'
  ) | grep ^token

  portForward
}

createStandard() {
  kubeConfig
  createKind

  timeout 60 kubectl get nodes -o wide -w
  timeout 60 kubectl get pods -A -o wide -w

  kubectl apply -f limitrange-limits.yaml -n default

  kubectl create namespace standard
  kubectl config set-context $(kubectl config current-context) --namespace standard
  kubectl apply -f limitrange-limits.yaml
  kubectl describe nodes
}

internalAllInOne() {
  createStandard
  appFirst
  cronJob
  deployApps
  ingressForward

  timeout 20 kubectl get pods -A -o wide -w
  echo -e '\n\nk8s creation finished.\n\n'

  TTY_PASSWD="$(makePasswd)"
  genPasswd "$TTY_PASSWD"
  echo "Initialized password: '$TTY_PASSWD'"

  initializeDatabase false
}

jsxSite() {
  kubectl apply -f jsxjp
  waitFor jsxjp
}

createKind() {
  kind create cluster --config $KINDCONFIG --name $KINDNAME
}

kubeConfig() {
  ln -sfn kind-config-$KINDNAME $HOME/.kube/config
}

cronJob() {
  [[ "$KINDNAME" != production ]] && return
  [[ "$(hostname)" != bionic ]] && return
  kubectl create cronjob value-domain --image=jobscale/value-domain --schedule='0/7 * * * *'
}

metalLB() {
  METAL_VERSION=$(git ls-remote --tags --refs https://github.com/danderson/metallb.git | tail -1 | awk -F/ '{print $3}')
  echo -e "\n MetalLB ${METAL_VERSION} \n"
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/metallb.yaml
  kubectl apply -f https://git.io/km-config.yaml
  # kubectl apply -f layer2-config.yaml
  waitFor metallb-system
}

ingressNginx() {
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
  waitFor ingress-nginx
}

ingressForward() {
  kubectl apply -f web
  waitFor web
}

adminDashboard() {
  kubectl apply -f kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
  waitFor kubernetes-dashboard
}

makePasswd() {
  head -c 8 /dev/random | mkpasswd -s -5 | sed -e 's/\$//g' | sed -e 's/^1//'
}

genPasswd() {
  [[ "$GEN_PASSWD" == "" ]] && GEN_PASSWD="$1"
  [[ "$GEN_PASSWD" == "" ]] && echo -e "failed password.\nusage:\n\n  GEN_PASSWD='$(makePasswd)' genPasswd\n" && return
  kubectl exec -it $(kubectl get pods | grep ^gke- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^eks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^aks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^wetty- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
}

exposedDeployment() {
  kubectl create deployment $1 --image $2
  delay
  kubectl expose deployment $1 --name $1 --type LoadBalancer --port $3 --target-port $4
  [[ "$5" != "0" ]] && kubectl autoscale deployment $1 --cpu-percent 50 --min $5 --max 20
  waitFor $1
}

deployBacklog() {
  [[ $(grep ""vm.max_map_count /etc/sysctl.d/99-sysctl.conf | wc -l) < 1 ]] \
  && echo "vm.max_map_count = 262144" | sudo tee -a /etc/sysctl.d/99-sysctl.conf \
  && sudo sysctl --system
  kubectl run elasticsearch --env "http.host=0.0.0.0" --env "ES_JAVA_OPTS=-Xms512m -Xmx512m" --image docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
  waitFor elasticsearch
  kubectl run graylog --env GRAYLOG_HTTP_EXTERNAL_URI="/" --port 9000 --port 12201 --port 1514 --port 5555 --image graylog/graylog:3.1
  kubectl expose deployment graylog --name graylog --type LoadBalancer--port 80 --target-port 9000
  waitFor graylog
}

deployBackend() {
  kubectl create deployment redis --image redis
  kubectl expose deployment redis --name redis --type ClusterIP --port 6379
  waitFor redis

  kubectl create deployment mongo --image mongo
  kubectl expose deployment mongo --name mongo --type ClusterIP --port 27017
  waitFor mongo

  kubectl apply -f mariadb
  waitFor mariadb

  if [[ $(docker images | grep local/tetris | wc -l) > 0 ]]
  then
    kind load docker-image local/tetris:0.0.1 --name $KINDNAME
    delay
    kubectl create deployment tetris --image local/tetris:0.0.1
    kubectl expose deployment tetris --name tetris --type ClusterIP --port 443 --target-port 443
    waitFor tetris
  fi
}

metricsServer() {
  kubectl apply -f 1.8+
}

appFirst() {
  delay && metricsServer
  delay && metalLB
  delay && ingressNginx
  delay && adminDashboard
  delay && deployBackend
  delay && jsxSite
}

loadImage() {
  docker pull $2
  kind load docker-image $2 --name $KINDNAME
  delay
}

ecoDeploy() {
  [[ "$(hostname)" == damemurimuda ]] && loadImage $@
  exposedDeployment $@
}

deployApps() {
  ecoDeploy gke jobscale/cloud-terminal 443 3000 0
  ecoDeploy eks jobscale/cloud-terminal 443 3000 0
  ecoDeploy aks jobscale/cloud-terminal 443 3000 0
  ecoDeploy wetty jobscale/wetty 443 3000 0
  ecoDeploy profile jobscale/profile 80 80 3
  ecoDeploy mongo-blog jobscale/mongo-blog 80 3344 3
  ecoDeploy laravel jobscale/laravel 80 80 3
  ecoDeploy lumen jobscale/lumen 80 80 3
  ecoDeploy room-chat jobscale/room-chat 80 3033 0
  ecoDeploy simple-chat jobscale/simple-chat 80 3000 0
  ecoDeploy echo-server inanimate/echo-server 80 8080 3
  ecoDeploy anywaychat jobscale/anywaychat 80 80 3
  ecoDeploy dokuwiki jobscale/dokuwiki 80 80 3
  ecoDeploy wordpress jobscale/wordpress 80 80 0
  ecoDeploy ramen-timer jobscale/ramen-timer 80 80 3
  ecoDeploy ec-cube jobscale/ec-cube:4.0 80 80 3
  kubectl apply -f django
  waitFor django
}

delAll() {
  for app in laravel lumen blog simple-chat chat
  do
    kubectl delete svc $app
    kubectl delete deployment $app
  done
}

token() {
  # kubectl describe secrets | grep ^token | awk '{print $2}'
  kubectl -n kube-system describe secret $(
    kubectl -n kube-system get secret | grep admin-user | awk '{print $1}'
  )
}

portForward() {
  [[ $(nc -v localhost $KINDHTTPS -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] \
  && sudo -E kubectl port-forward --address 0.0.0.0 svc/web $KINDHTTPS:443 $KINDHTTP:80 &
  sleep 2
  while [[ true ]]
  do
    echo -e "$(date +'%F %T') - keep alive port forward connection."
    delay
    nc -v 127.0.0.1 $KINDHTTPS -w 1 < /dev/null
    delay
    nc -v 127.0.0.1 $KINDHTTP -w 1 < /dev/null
  done
}
