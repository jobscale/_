production() {
  export KINDNAME=production
  export KINDCONFIG=kind/production.yaml
}
staging() {
  export KINDNAME=staging
  export KINDCONFIG=kind/staging.yaml
}
development() {
  export KINDNAME=development
  export KINDCONFIG=kind/development.yaml
}

staging

svc() {
  [[ $(nc -v localhost 8001 -w 1 < /dev/null 2>&1 | grep succeeded | wc -l) != 1 ]] && kubectl proxy &
  KUBE_NAMESPACE=$1
  KUBE_SERVICE=$1
  KUBE_HOST=http://127.0.0.1:8001
  KUBE_TOKEN=$(kubectl describe secrets | grep ^token | awk '{print $2}')
  kubectl config view --raw
  echo "token $KUBE_TOKEN"
  # open ${KUBE_HOST}/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
  kubectl -n $KUBE_NAMESPACE -ojson get service $KUBE_SERVICE > ../loadbalancer.json
  vi ../loadbalancer.json
  https_proxy= http_proxy= curl -k --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_HOST}/api/v1/namespaces/${KUBE_NAMESPACE}/services/${KUBE_SERVICE}/status -X PUT -d @../loadbalancer.json -H 'content-type:application/json'
}

delay() {
  sleep 8
}

waitFor() {
  delay
  delay
  while [[ "$1" != "" ]]
  do
    [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
    echo " $1 - ng"
    echo -ne "just a moment please 11.."
    for i in {10..0}
    do
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
      delay
      [[ $(kubectl get pods -A | grep $1 | grep 1/1 | wc -l) > 0 ]] && echo -e "\n $1 - ok\n" && return
      echo -n " $i.."
    done
  done
}

initializeDatabase() {
  sql="CREATE DATABASE wordpress;
GRANT ALL PRIVILEGES ON wordpress.* TO 'wp-user'@'%' IDENTIFIED BY 'wp-admin';
FLUSH PRIVILEGES;"
  kubectl exec -i $(
    kubectl get all | grep pod | grep mariadb | awk '{print $1}'
  ) -- bash -c "echo \"$sql\" | mysql -p$1"
}

allInOne() {
  echo -n "setup '$KINDNAME' deployment "
  read -p "ok? (y/N): " yn; case "$yn" in [yY]*) echo "continue";; *) echo "abort" && return;; esac

  LOGFILE=/k8s/log/kind-$KINDNAME-$(date +'%Y-%m-%d-%H:%M:%S').log
  time internalAllInOne 2>&1 | tee $LOGFILE

  kubectl -n kube-system describe secret $(
    kubectl -n kube-system get secrets | grep admin-user | awk '{print $1}'
  ) | grep ^token
}

createStandard() {
  kubectl apply -f limitrange-limits.yaml -n default

  kubectl create namespace standard
  kubectl config set-context $(kubectl config current-context) --namespace standard
  kubectl apply -f limitrange-limits.yaml
  kubectl describe nodes
}

internalAllInOne() {
  createKind
  pullImages
  createStandard
  createSecret
  appFirst
  cronJob
  deployApps
  ingressForward

  timeout 20 kubectl get pods -A -o wide -w
  docker exec -i $KINDNAME-control-plane crictl images
  echo -e '\n\nk8s creation finished.\n\n'

  TTY_PASSWD="$(makePasswd)"
  genPasswd "$TTY_PASSWD"
  echo "Initialized password: '$TTY_PASSWD'"

  initializeDatabase false
}

createSecret() {
  FILE=$HOME/.docker/config.json
  kubectl create secret generic regcred --from-file=.dockerconfigjson=$FILE --type=kubernetes.io/dockerconfigjson
}

jsxSite() {
  kubectl apply -f jsxjp
  waitFor jsxjp
}

nodeAws() {
  kubectl apply -f node-aws
  waitFor node-aws
}

createKind() {
  [[ -s $HOME/.kube/config ]] && mv $HOME/.kube/config $HOME/.kube/save-config_$(date +'%Y-%m-%d_%H:%M:%S')
  # kind create cluster --name $KINDNAME --config $KINDCONFIG
  kind create cluster --name $KINDNAME --config $KINDCONFIG --image kindest/node:v1.19.0
  cp $HOME/.kube/config $HOME/.kube/kind-config-$KINDNAME

  timeout 60 kubectl get nodes -o wide -w
  timeout 60 kubectl get pods -A -o wide -w
}

cronJob() {
  [[ "$KINDNAME" != production ]] && return
  [[ "$(hostname)" != focal ]] && return
  kubectl create cronjob value-domain --image=jobscale/value-domain --schedule='0/7 * * * *'
}

metalLB() {
  METAL_VERSION=$(git ls-remote --tags --refs https://github.com/danderson/metallb.git | tail -1 | awk -F/ '{print $3}')
  METAL_SECRET=$(openssl rand -base64 128 | xargs | sed -e 's/ //g')
  echo -e "\n MetalLB ${METAL_VERSION} \n"
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/namespace.yaml
  kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=$METAL_SECRET
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/metallb.yaml
  kubectl apply -f https://git.io/km-config.yaml
  # kubectl apply -f layer2-config.yaml
  waitFor metallb-system
}

ingressForward() {
  kubectl apply -f web
  waitFor web
}

adminDashboard() {
  kubectl apply -f kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
  waitFor kubernetes-dashboard
}

partnerEnvironment() {
  kubectl apply -f partner
  waitFor partner
}

makePasswd() {
  head -c 8 /dev/random | mkpasswd -s -5 | sed -e 's/\$//g' | sed -e 's/^1//'
}

genPasswd() {
  [[ "$GEN_PASSWD" == "" ]] && GEN_PASSWD="$1"
  [[ "$GEN_PASSWD" == "" ]] && echo -e "failed password.\nusage:\n\n  GEN_PASSWD='$(makePasswd)' genPasswd\n" && return
  kubectl exec -i $(kubectl get pods | grep ^gke- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^eks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^aks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -i $(kubectl get pods | grep ^wetty- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
}

exposedDeployment() {
  MIN_REPLICA=$5
  MIN_REPLICA=1 # minimum up
  kubectl create deployment $1 --image $2
  kubectl expose deployment $1 --name $1 --type LoadBalancer --port $3 --target-port $4
  [[ "$5" != "0" ]] && kubectl autoscale deployment $1 --cpu-percent 50 --min $MIN_REPLICA --max 20
  waitFor $1
}

deployCluster() {
  kubectl create deployment $1 --image $2
  kubectl expose deployment $1 --name $1 --type ClusterIP --port $3 --target-port $4
  waitFor $1
}

deployBacklog() {
  [[ $(grep ""vm.max_map_count /etc/sysctl.d/99-sysctl.conf | wc -l) < 1 ]] \
  && echo "vm.max_map_count = 262144" | sudo tee -a /etc/sysctl.d/99-sysctl.conf \
  && sudo sysctl --system
  kubectl run elasticsearch --env "http.host=0.0.0.0" --env "ES_JAVA_OPTS=-Xms512m -Xmx512m" --image docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.2
  waitFor elasticsearch
  kubectl run graylog --env GRAYLOG_HTTP_EXTERNAL_URI="/" --port 9000 --port 12201 --port 1514 --port 5555 --image graylog/graylog:3.1
  kubectl expose deployment graylog --name graylog --type LoadBalancer--port 80 --target-port 9000
  waitFor graylog
}

deployBackend() {
  deployCluster redis redis 6379 6379
  deployCluster mongo mongo 27017 27017
  kubectl apply -f mariadb && waitFor mariadb
  kubectl apply -f postgres && waitFor postgres
  partnerEnvironment
}

metricsServer() {
  kubectl apply -f 1.8+
}

appFirst() {
  delay && metricsServer
  delay && metalLB
  delay && adminDashboard
  delay && deployBackend
  delay && jsxSite
  delay && nodeAws
}

loadImage() {
  docker pull $1
  kind load docker-image $1 --name $KINDNAME
  delay
}

deployGitlab() {
  kubectl create namespace gitlab
  kubectl config set-context $(kubectl config current-context) --namespace gitlab
  exposedDeployment gitlab jobscale/gitlab 443 443 0
  kubectl config set-context $(kubectl config current-context) --namespace standard
}

deployMysql() {
  kubectl create namespace mysql
  kubectl config set-context $(kubectl config current-context) --namespace mysql
  kubectl apply -f mysql && waitFor mysql
  kubectl config set-context $(kubectl config current-context) --namespace standard
}

deployNode() {
  exposedDeployment wetty jobscale/wetty 443 3000 0
  exposedDeployment gke jobscale/cloud-terminal 443 3000 0
  exposedDeployment eks jobscale/cloud-terminal 443 3000 0
  exposedDeployment aks jobscale/cloud-terminal 443 3000 0
  exposedDeployment mongo-blog jobscale/mongo-blog 80 3000 3
  exposedDeployment room-chat jobscale/room-chat 80 3000 0
  exposedDeployment simple-chat jobscale/simple-chat 80 3000 0
}

deployNginx() {
  exposedDeployment nginx nginx 80 80 3
  exposedDeployment anywaychat jobscale/anywaychat 80 80 3
  exposedDeployment ramen-timer jobscale/ramen-timer 80 80 3
}

deployPhp() {
  exposedDeployment profile jobscale/profile 80 80 3
  exposedDeployment laravel jobscale/laravel 80 80 3
  exposedDeployment lumen jobscale/lumen 80 80 3
  exposedDeployment dokuwiki jobscale/dokuwiki 80 80 3
  exposedDeployment wordpress jobscale/wordpress 80 8000 0
  exposedDeployment ec-cube jobscale/ec-cube:4.0 80 80 3
}

deployApache() {
  exposedDeployment apache httpd 80 80 3
}

deployPython() {
  kubectl apply -f django
  waitFor django
}

deployEcho() {
  exposedDeployment echo-server inanimate/echo-server 80 8080 3
}

deployApps() {
  deployNode
  deployNginx
  deployPhp
  deployMysql
  deployGitlab
  deployPython
  deployApache
  deployEcho
}

delAll() {
  for app in laravel lumen blog simple-chat chat
  do
    kubectl delete svc $app
    kubectl delete deployment $app
  done
}

token() {
  # kubectl describe secrets | grep ^token | awk '{print $2}'
  kubectl -n kube-system describe secret $(
    kubectl -n kube-system get secret | grep admin-user | awk '{print $1}'
  )
}

pullImages() {
  IMAGELIST=(
    node
    nginx
    mysql:8.0
    httpd
    mariadb
    mongo
    postgres
    redis
    jobscale/cloud-terminal
    jobscale/wetty
    jobscale/anywaychat
    jobscale/django
    jobscale/dokuwiki
    jobscale/ec-cube:4.0
    jobscale/gitlab
    jobscale/jsxjp
    jobscale/laravel
    jobscale/lumen
    jobscale/mongo-blog
    jobscale/profile
    jobscale/ramen-timer
    jobscale/room-chat
    jobscale/simple-chat
    jobscale/value-domain
    jobscale/web
    jobscale/wordpress
    kubernetesui/dashboard:v2.0.0-beta8
    kubernetesui/metrics-scraper:v1.0.2
    metallb/controller:v0.9.3
    metallb/speaker:v0.9.3
    inanimate/echo-server
  )
  for image in ${IMAGELIST[@]}
  do
    echo pull image $image
    time docker exec -i $KINDNAME-control-plane crictl pull $image &
    UNIT=$(echo "(${UNIT:-0} + 1) % 1" | bc)
    [[ $UNIT == 0 ]] && wait
  done
  wait
}
