svc() {
  [[ $(nc -v localhost 8001 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && kubectl proxy &
  KUBE_NAMESPACE=default
  KUBE_SERVICE=$1
  KUBE_HOST=http://127.0.0.1:8001
  KUBE_TOKEN=$(kubectl describe secrets | grep ^token | awk '{print $2}')
  kubectl config view --raw
  echo "token $KUBE_TOKEN"
  # open ${KUBE_HOST}/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
  kubectl -n $KUBE_NAMESPACE -ojson get service $KUBE_SERVICE > ../loadbalancer.json
  vi ../loadbalancer.json
  https_proxy= http_proxy= curl -k --header "Authorization: Bearer $KUBE_TOKEN" ${KUBE_HOST}/api/v1/namespaces/${KUBE_NAMESPACE}/services/${KUBE_SERVICE}/status -X PUT -d @../loadbalancer.json -H 'content-type:application/json'
}

delay() {
  sleep 8
}

waitFor() {
  while [[ "$1" != "" ]]
  do
    [[ $(kubectl get pods | grep ^$1- | awk '{print $2}') == 1/1 ]] && echo "$1 - ok" && return
    echo "$1 - ng"
    echo "just a moment please 11..."
    for i in {10..0}
    do
      sleep 16
      echo -n " $i..."
    done
  done
}

list=(
  redis
  mongo
  nginx
  debian:buster
  ubuntu:bionic
  php:7.3-fpm-buster
  metallb/speaker:v0.8.1
  metallb/controller:v0.8.1
  kubernetesui/dashboard:v2.0.0-beta4
  inanimate/echo-server

  jobscale/debian:buster
  jobscale/nginx:buster

  jobscale/ubuntu:bionic
  jobscale/nginx:bionic

  jobscale/web

  jobscale/node
  jobscale/blog
  jobscale/chat
  jobscale/simple-chat
  jobscale/anywaychat

  jobscale/wetty
  jobscale/cloud-terminal

  jobscale/php-fpm
  jobscale/dokuwiki
  jobscale/laravel
  jobscale/lumen

  jobscale/django
)

pullAll() {
  for image in ${list[*]}
  do
    docker pull $image
  done
}

loadAll() {
  for image in ${list[*]}
  do
    kind load docker-image $image
  done
}

allInOne() {
  time internalAllInOne | tee /tmp/k8s-all.log

  timeout 60 kubectl get pods -A -w
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secrets | grep admin-user | awk '{print $1}') | grep ^token
  portForward
}

internalAllInOne() {
  pullAll
  createKind
  timeout 120 kubectl get nodes -w
  timeout 60 kubectl get pods -A -w
  loadAll
  kubeConfig

  metalLB
  delay && ingressNginx
  delay && adminDashboard

  timeout 60 kubectl get pods -A -w

  deployApps

  delay && ingressForward

  exposedDeployment gke jobscale/cloud-terminal 443 3000 0
  exposedDeployment eks jobscale/cloud-terminal 443 3000 0
  exposedDeployment aks jobscale/cloud-terminal 443 3000 0
  timeout 60 kubectl get pods -A -w

  exposedDeployment django jobscale/django 80 80 3
  timeout 60 kubectl get pods -A -w

  exposedDeployment anywaychat jobscale/anywaychat 80 80 3
  timeout 60 kubectl get pods -A -w

  exposedDeployment dokuwiki jobscale/dokuwiki 80 80 3
  timeout 60 kubectl get pods -A -w

  echo -e '\n\nk8s creation finished.\n\n'
  timeout 120 kubectl get pods -A -w

  waitFor wetty
  waitFor gke
  waitFor eks
  waitFor aks
  TTY_PASSWD="$(makePasswd)"
  genPasswd "$TTY_PASSWD"
  echo "Initialized password: '$TTY_PASSWD'"

  waitFor web
}

kubeConfig() {
  alias kube-kind='ln -sfn $(kind get kubeconfig-path --name="kind") ~/.kube/config'
}

createKind() {
  kind create cluster --config multinode.yaml
}

metalLB() {
  METAL_VERSION=$(git ls-remote --tags --refs https://github.com/danderson/metallb.git | tail -1 | awk -F/ '{print $3}')
  echo -e "\n MetalLB ${METAL_VERSION} \n"
  kubectl apply -f https://raw.githubusercontent.com/google/metallb/${METAL_VERSION}/manifests/metallb.yaml
  kubectl apply -f https://git.io/km-config.yaml
  # kubectl apply -f layer2-config.yaml
}

ingressNginx() {
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud-generic.yaml
}

ingressForward() {
  delay && kubectl apply -f web
}

adminDashboard() {
  kubectl apply -f kubernetes-dashboard.yaml
  kubectl apply -f admin-user-service-account.yaml
}

makePasswd() {
  head -c 8 /dev/random | mkpasswd -s -5 | sed -e 's/\$//g' | sed -e 's/^1//'
}

genPasswd() {
  [[ "$GEN_PASSWD" == "" ]] && GEN_PASSWD="$1"
  [[ "$GEN_PASSWD" == "" ]] && echo -e "failed password.\nusage:\n\n  GEN_PASSWD='$(makePasswd)' genPasswd\n" && return
  kubectl exec -it $(kubectl get pods | grep ^gke- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^eks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^aks- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
  kubectl exec -it $(kubectl get pods | grep ^wetty- | awk '{print $1}') -- bash -c "echo buster:$GEN_PASSWD | chpasswd"
}

echoServer() {
  exposedDeployment hello inanimate/echo-server 443 8443 3
}

exposedDeployment() {
  kubectl create deployment $1 --image $2
  delay
  kubectl expose deployment $1 --name $1 --type LoadBalancer --port $3 --target-port $4
  [[ "$5" != "0" ]] && kubectl autoscale deployment $1 --cpu-percent 50 --min $5 --max 20
}

deployApps() {
  kubectl create deployment redis --image redis
  kubectl expose deployment redis --name redis --type ClusterIP --port 6379
  kubectl create deployment mongo --image mongo
  kubectl expose deployment mongo --name mongo --type ClusterIP --port 27017

  if [[ $(docker images | grep local/tetris | wc -l) > 0 ]]
  then
    kind load docker-image local/tetris:0.0.1
    kubectl create deployment tetris --image local/tetris:0.0.1
    kubectl expose deployment tetris --name tetris --type ClusterIP --port 80 --target-port 8888
  fi

  svcApps
}

svcApps() {
  exposedDeployment laravel jobscale/laravel 80 80 3
  exposedDeployment lumen jobscale/lumen 80 80 3
  exposedDeployment blog jobscale/blog 80 3344 3
  exposedDeployment simple-chat jobscale/simple-chat 80 3000 0
  exposedDeployment chat jobscale/chat 80 3033 0
  exposedDeployment wetty jobscale/wetty 443 3000 0
}

delAll() {
  for app in laravel lumen blog simple-chat chat
  do
    kubectl delete svc $app
    kubectl delete deployment $app
  done
}

token() {
  # kubectl describe secrets | grep ^token | awk '{print $2}'
  kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
}

portForward() {
  [[ $(nc -v localhost 443 -w 1 < /dev/null |& grep succeeded | wc -l) != 1 ]] && sudo -E kubectl port-forward --address 0.0.0.0 svc/web 443:443 80:80 &
  wait
}
